Skvƒõl√©. N√≠≈æe m√°≈° **fin√°ln√≠ podrobn√Ω strategick√Ω pl√°n refaktoringu projektu ‚ÄûFinal Cue Sheet Checker‚Äú**.
Je plnƒõ v souladu s principy *KISS*, s metodikou z dokumentu *Strategie refaktoringu monolitick√© Python aplikace* a s tvoj√≠ realitou (jeden v√Ωvoj√°≈ô, bez CI, d≈Øraz na bezpeƒçnost a testovatelnost).
Obsahuje i popis souborov√© struktury a architektonick√© diagramy.

---

# üß≠ **Strategick√Ω pl√°n refaktoringu ‚Äì Final Cue Sheet Checker**

---

## 1. Filozofie a c√≠le refaktoringu

### 1.1 C√≠l

Transformovat aplikaci ‚ÄûFinal Cue Sheet Checker‚Äú do **dlouhodobƒõ udr≈æiteln√©ho, testovatelnƒõ stabiln√≠ho a architektonicky ƒçist√©ho modul√°rn√≠ho monolitu**, ani≈æ by se zmƒõnilo jej√≠ aktu√°ln√≠ chov√°n√≠.

### 1.2 Z√°sady

* **KISS** ‚Äì ka≈æd√Ω krok m√° p≈ôin√©st konkr√©tn√≠ hodnotu s minim√°ln√≠m k√≥dem. ≈Ω√°dn√© ‚Äûpro jistotu‚Äú abstrakce.
* **Iterativn√≠ p≈ô√≠stup** ‚Äì po ka≈æd√© f√°zi je aplikace funkƒçn√≠ a testy proch√°zej√≠.
* **Behavior√°ln√≠ parita** ‚Äì refaktoring nesm√≠ mƒõnit v√Ωsledky aplikace.
* **Testy jako pojistka** ‚Äì ka≈æd√Ω krok chr√°nƒõn charakterizaƒçn√≠mi a unit testy.
* **Modular monolith** ‚Äì jasnƒõ vymezen√© vrstvy (UI / services / core / adapters) bez distribuƒçn√≠ slo≈æitosti mikroservis.

---

## 2. Architektura a c√≠lov√° struktura projektu

### 2.1 P≈ôehled vrstev

| Vrstva            | √öƒçel                                                                | P≈ô√≠klady modul≈Ø                                                                                          |
| :---------------- | :------------------------------------------------------------------ | :------------------------------------------------------------------------------------------------------- |
| **UI**            | ≈ò√≠d√≠ interakci s u≈æivatelem (Qt GUI, CLI). ≈Ω√°dn√° logika.            | `ui/main_window.py`, `app.py`                                                                            |
| **Services**      | Orchestrace aplikace ‚Äì spojuje dom√©nu a adapt√©ry.                   | `services/analysis_service.py`, `services/export_service.py`                                             |
| **Core (Domain)** | ƒåist√° logika a datov√© modely, ≈æ√°dn√Ω I/O.                            | `core/domain/comparison.py`, `core/domain/extraction.py`, `core/models/analysis.py`                      |
| **Adapters**      | Komunikace s okoln√≠m svƒõtem (souborov√Ω syst√©m, audio knihovny, AI). | `adapters/filesystem/file_discovery.py`, `adapters/audio/wav_reader.py`, `adapters/pdf/pdf_extractor.py` |

---

### 2.2 C√≠lov√° souborov√° struktura

```
final_cue_sheet_checker/
‚îÇ
‚îú‚îÄ‚îÄ ui/
‚îÇ   ‚îú‚îÄ‚îÄ main_window.py
‚îÇ   ‚îú‚îÄ‚îÄ app.py
‚îÇ   ‚îî‚îÄ‚îÄ config_models.py
‚îÇ
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îú‚îÄ‚îÄ analysis_service.py
‚îÇ   ‚îú‚îÄ‚îÄ export_service.py
‚îÇ   ‚îî‚îÄ‚îÄ __init__.py
‚îÇ
‚îú‚îÄ‚îÄ core/
‚îÇ   ‚îú‚îÄ‚îÄ domain/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ comparison.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ extraction.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ analysis.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ ports.py
‚îÇ   ‚îî‚îÄ‚îÄ __init__.py
‚îÇ
‚îú‚îÄ‚îÄ adapters/
‚îÇ   ‚îú‚îÄ‚îÄ filesystem/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ file_discovery.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ audio/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ wav_reader.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ai_mode_detector.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ pdf/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pdf_extractor.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ __init__.py
‚îÇ
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ test_core/
‚îÇ   ‚îú‚îÄ‚îÄ test_services/
‚îÇ   ‚îú‚îÄ‚îÄ test_adapters/
‚îÇ   ‚îî‚îÄ‚îÄ data/ (golden JSON, ZIP, PDF)
‚îÇ
‚îú‚îÄ‚îÄ tools/
‚îÇ   ‚îú‚îÄ‚îÄ check.sh
‚îÇ   ‚îî‚îÄ‚îÄ __init__.py
‚îÇ
‚îî‚îÄ‚îÄ pyproject.toml
```

---

### 2.3 Architektonick√© diagramy

#### **Komponentov√Ω diagram (vrstvy a z√°vislosti)**

```
+------------------------------+
|           UI Layer           |
| (Qt GUI, CLI, entry point)   |
+-------------+----------------+
              |
              v
+-------------+----------------+
|           Services            |
| - AnalysisService             |
| - ExportService               |
+-------------+----------------+
              |
              v
+-------------+----------------+
|             Core             |
|  (pure domain logic + models)|
+-------------+----------------+
              |
              v
+-------------+----------------+
|           Adapters           |
| Filesystem / Audio / PDF / AI|
+------------------------------+
```

#### **Datov√Ω tok (workflow aplikace)**

```
[UI Action]
   |
   v
[AnalysisService]
   |
   +--> discover_and_pair_files() [Filesystem Adapter]
   |
   +--> extract_wav_files() [Audio Adapter]
   |
   +--> compare_data() [Core Domain]
   |
   +--> export_results_to_json() [Export Service ‚Üí Filesystem]
   |
   v
[UI displays results]
```

---

## 3. F√°zovan√Ω pl√°n refaktoringu (bez CI, s lok√°ln√≠ kontrolou kvality)

Ka≈æd√° f√°ze je **nasaditeln√°**, testy mus√≠ b√Ωt po dokonƒçen√≠ zelen√©, `tools/check.sh` bez chyb.

---

### **F√°ze 1 ‚Äì Stabilizace a baseline**

**C√≠l:**
Upevnit souƒçasn√© chov√°n√≠, odstranit zjevn√© typov√© a logick√© nekonzistence.

**Kroky:**

1. Opravit typy v `SideResult` a `compare_data` (nepou≈æ√≠vat `model_dump()` u pol√≠ s modely).
2. Opravit mrtv√Ω `logging.info()` v `discover_and_pair_files`.
3. Zajistit funkƒçn√≠ charakterizaƒçn√≠ testy (golden JSONy, v√Ωstupy).
4. P≈ôidat skript `tools/check.sh` pro lok√°ln√≠ lint/type/test bƒõh.

**V√Ωsledek:**
K√≥d ƒçist√Ω, typovƒõ konzistentn√≠, testy potvrzuj√≠ stejn√© chov√°n√≠.

---

### **F√°ze 2 ‚Äì Odstranƒõn√≠ glob√°ln√≠ch z√°vislost√≠ a DI**

**C√≠l:**
Zru≈°it z√°vislost na glob√°ln√≠m `cfg`, zav√©st explicitn√≠ dependency injection.

**Kroky:**

1. Vytvo≈ôit `IdExtractionSettings`, `ToleranceSettings`, `ExportSettings` (dataclass / Pydantic).
2. Entry point (`app.py` nebo `main_window.py`) sestav√≠ tyto objekty a p≈ôed√° je do `AnalysisService`.
3. Upravit signatury:

   * `extract_numeric_id(filename, settings: IdExtractionSettings)`
   * `discover_and_pair_files(..., id_settings: IdExtractionSettings)`
   * `compare_data(..., tolerance_settings: ToleranceSettings)`
4. Upravit testy ‚Äì parametrize r≈Øzn√© kombinace nastaven√≠.

**V√Ωsledek:**
≈Ω√°dn√© glob√°ln√≠ promƒõnn√©, deterministick√© testy, ƒçist√© rozhran√≠ funkc√≠.

---

### **F√°ze 3 ‚Äì Modularizace I/O**

**C√≠l:**
Vyƒçistit dom√©nu od I/O k√≥du a p≈ôesunout jej do adapt√©r≈Ø.

**Kroky:**

1. Vytvo≈ôit `adapters/audio/wav_reader.py`:

   ```python
   class ZipWavFileReader:
       def extract_wav_files(self, zip_path: Path) -> list[WavFile]:
           ...
   ```
2. P≈ôesunout ƒçten√≠ ZIP≈Ø, trv√°n√≠ WAV≈Ø a fallbacky sem.
3. Upravit `core/domain/extraction.py`, aby pou≈æ√≠val `WavFile` objekty, ne p≈ô√≠mo soubory.
4. Jednotkov√© testy adapteru (valid ZIP, po≈°kozen√Ω, pr√°zdn√Ω, fallback).

**V√Ωsledek:**
Dom√©na je ƒçistƒõ logick√°, I/O testov√°no izolovanƒõ.

---

### **F√°ze 4 ‚Äì Export jako slu≈æba**

**C√≠l:**
Jednotn√© m√≠sto pro export, snadn√° konfigurace, ≈æ√°dn√° logika v UI.

**Kroky:**

1. Vytvo≈ôit `services/export_service.py` s funkc√≠:

   ```python
   def export_results_to_json(results: list[SideResult], settings: ExportSettings) -> Optional[Path]:
       ...
   ```
2. UI i AnalysisService volaj√≠ jen tuto slu≈æbu.
3. Testy na: auto export, vytvo≈ôen√≠ adres√°≈ôe, write failure.

**V√Ωsledek:**
Centralizovan√Ω, testovateln√Ω export, ≈æ√°dn√© duplicity.

---

### **F√°ze 5 ‚Äì Port pro AI detekci (voliteln√©)**

**C√≠l:**
Oddƒõlit AI detekci re≈æimu zvuku do portu ‚Äì testovateln√° roz≈°i≈ôitelnost.

**Kroky:**

1. V `core/ports.py` p≈ôidat:

   ```python
   class AudioModeDetector(Protocol):
       def detect(self, wavs: list[WavInfo]) -> dict[str, list[WavInfo]]:
           ...
   ```
2. Implementovat `AiAudioModeDetector` v `adapters/audio/ai_mode_detector.py`.
3. Implementovat `FakeAudioModeDetector` pro testy.
4. `AnalysisService` dostane detektor p≈ôes konstruktor.

**V√Ωsledek:**
AI logika izolovan√°, testy mohou pou≈æ√≠vat fake implementaci.

---

## 4. Prevence chyb a regres√≠

| Riziko                           | Prevence                                   |
| :------------------------------- | :----------------------------------------- |
| Zmƒõna chov√°n√≠ bƒõhem refaktoringu | Charakterizaƒçn√≠ testy (golden outputs).    |
| Typov√© chyby                     | `mypy --strict` v `tools/check.sh`.        |
| Zapomenut√© importy/unused code   | `ruff check .`.                            |
| N√°hodn√© zmƒõny v UI               | UI testuje se pouze skrze service v√Ωstupy. |
| P≈ôenos chyb z I/O do dom√©ny      | Oddƒõlen√≠ vrstev, testy adapter≈Ø zvl√°≈°≈•.    |

---

## 5. Lok√°ln√≠ kontrola kvality (bez CI)

**`tools/check.sh`**

```bash
#!/usr/bin/env bash
set -euo pipefail
python -m pytest -q
coverage run -m pytest
coverage report --fail-under=85
ruff check .
mypy --strict .
openspec validate --strict
echo "All checks passed ‚úÖ"
```

> V√Ωsledek: v≈°echny br√°ny testov√°ny lok√°lnƒõ, CI nen√≠ pot≈ôeba.

---

## 6. Mƒõ≈ôiteln√© indik√°tory √∫spƒõchu

| F√°ze | Ukazatel         | Mƒõ≈ô√≠tko √∫spƒõchu                                         |
| :--- | :--------------- | :------------------------------------------------------ |
| F1   | Typov√° stabilita | `mypy` bez chyb, v≈°echny testy zelen√©                   |
| F2   | DI bez glob√°l≈Ø   | ≈æ√°dn√Ω `import cfg` mimo `app.py`                        |
| F3   | Oddƒõlen√© I/O     | `core/domain` neobsahuje ≈æ√°dn√Ω `open()`, `os`           |
| F4   | Export           | Jedin√° funkce `export_results_to_json`, 100 % test pass |
| F5   | AI port          | `AudioModeDetector` testovan√Ω s fake adapt.             |

---

## 7. Shrnut√≠ strategie

1. Postupuj **po f√°z√≠ch**, nikdy ne v√≠ce oblast√≠ v jednom PR.
2. Po ka≈æd√© f√°zi spus≈• `tools/check.sh`.
3. Nep≈ôid√°vej ≈æ√°dn√© nov√© funkce ‚Äì refaktoring = stejn√° funkƒçnost, ƒçist≈°√≠ k√≥d.
4. Ka≈ædou novou t≈ô√≠du/test si zaznamenej v dokumentaci projektu.
5. Po dokonƒçen√≠ F4 m√°≈° stabiln√≠, plnƒõ testovateln√Ω z√°klad. F5 je voliteln√° nadstavba.

---

## 8. Z√°vƒõr

Tento pl√°n:

* minimalizuje riziko (ka≈æd√Ω krok je reverzibiln√≠),
* je v souladu s principy z *Clean Code in Python* a *Working Effectively with Legacy Code*,
* zachov√°v√° KISS,
* je provediteln√Ω jedn√≠m v√Ωvoj√°≈ôem bez CI infrastruktury,
* poskytuje mƒõ≈ôiteln√© v√Ωsledky po ka≈æd√© iteraci.

---

Chce≈°, abych nyn√≠ k tomuto pl√°nu doplnil i konkr√©tn√≠ **n√°vrhy diagram≈Ø ve form√°tu PlantUML** (komponentov√Ω a datov√Ω tok), kter√© m≈Ø≈æe≈° p≈ô√≠mo vykreslit do dokumentace projektu?
